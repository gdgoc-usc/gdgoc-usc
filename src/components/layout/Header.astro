---
import { Image } from 'astro:assets';
import SettingsDropdown from '../SettingsDropdown.tsx';
import TeamDropdown from './TeamDropdown.tsx';
import MobileTeamDropdown from './MobileTeamDropdown.tsx';
import { Menu, X, UserPlus } from 'lucide-react';
import HeaderLink from './HeaderLink.astro';
import MobileHeaderLink from './MobileHeaderLink.astro';
import AnnouncementModal from '../AnnouncementModal.tsx';

const navLinks = [
  { href: '#about', text: 'About GDG' },
  { href: '/partners', text: 'Partners' },
  { href: '#events', text: 'Events' },
  { href: '/faq', text: 'FAQ' },
  { href: 'https://merch.gdgoc.tech', text: 'Merch' },
];
---

<!-- bg-[url('/gdgoc_bg_1_compressed.svg')] bg-cover bg-center bg-no-repeat -->
<header
  class='fixed top-0 right-0 left-0 z-50 rounded-none transition-all duration-300 ease-in-out'
>
  <div id='main-header' class='w-full'>
    <div class='w-full px-4 sm:px-6 lg:py-2 xl:px-[11rem]'>
      <div class='flex h-16 items-center justify-between'>
        <div class='flex items-center sm:gap-8 md:lg:gap-12'>
          <a href='/' class='flex items-center space-x-2'>
            <Image
              src='/gdgoc_logo.svg'
              alt='GDGoC USC Logo'
              width={40}
              height={40}
              class='h-10 w-10'
            />
            <div class='flex flex-col'>
              <span
                class='hidden text-xl leading-tight font-medium text-black sm:md:lg:block dark:text-white'
              >
                Google Developer Groups
              </span>
              <span
                class='text-gdgoc-primary-blue hidden text-sm font-light sm:md:lg:block'
                >University of San Carlos</span
              >
            </div>
          </a>
          <nav class='hidden items-center space-x-8 lg:flex'>
            {
              navLinks.map(link => (
                <HeaderLink href={link.href} text={link.text} />
              ))
            }
            <TeamDropdown client:load currentPath={Astro.url.pathname} />
          </nav>
        </div>

        <div class='flex items-center gap-4'>
          <SettingsDropdown client:load />

          <a
            href='https://gdgoc.tech/member-registration'
            class='hover:bg-gdgoc-primary-blue/90 hidden items-center gap-2 rounded-full border-2 border-black bg-transparent px-4 py-2 font-medium text-black transition-colors duration-200 sm:inline-flex dark:border-white dark:text-white'
          >
            <UserPlus className='h-5 w-5' />
            <h1 class='custom-class'>Register</h1>
          </a>

          <button
            class='rounded-lg p-2 transition-colors duration-200 hover:bg-gray-100 lg:hidden dark:hover:bg-gray-800'
            aria-label='Open menu'
            id='mobile-menu-button'
          >
            <Menu className='h-6 w-6' id='menu-icon' />
            <X className='hidden h-6 w-6' id='close-icon' />
          </button>
        </div>
      </div>

      <div
        class='max-h-0 overflow-hidden opacity-0 transition-all duration-300 ease-in-out lg:hidden'
        id='mobile-menu'
      >
        <div class='space-y-1 px-2 pb-4'>
          {
            navLinks.map(link => (
              <MobileHeaderLink href={link.href} text={link.text} />
            ))
          }
          <MobileTeamDropdown client:load currentPath={Astro.url.pathname} />
          <a
            href='#membership'
            class='bg-gdgoc-primary-green hover:bg-gdgoc-primary-green/90 mt-4 block rounded-lg px-3 py-2 text-center font-medium text-white transition-colors duration-200'
          >
            Register
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<AnnouncementModal client:load />

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mainHeader = document.getElementById('main-header');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');

  function openMenu() {
    if (mobileMenu) {
      mobileMenu.classList.remove('opacity-0', 'max-h-0');
      mobileMenu.classList.add('opacity-100', 'max-h-96');
    }
    menuIcon?.classList.add('hidden');
    closeIcon?.classList.remove('hidden');
    isMenuOpen = true;
    setTimeout(() => {
      updateHeaderOnScroll();
    }, 150);
  }

  function closeMenu() {
    if (mobileMenu) {
      mobileMenu.classList.remove('opacity-100', 'max-h-96');
      mobileMenu.classList.add('opacity-0', 'max-h-0');
    }
    menuIcon?.classList.remove('hidden');
    closeIcon?.classList.add('hidden');
    isMenuOpen = false;
    setTimeout(() => {
      updateHeaderOnScroll();
    }, 150);
  }

  let isMenuOpen = false;

  mobileMenuButton?.addEventListener('click', event => {
    event.stopPropagation();

    if (isMenuOpen) {
      closeMenu();
    } else {
      openMenu();
    }
  });

  document.addEventListener('click', event => {
    if (
      !mobileMenuButton?.contains(event.target as Node) &&
      !mobileMenu?.contains(event.target as Node)
    ) {
      if (isMenuOpen) {
        closeMenu();
      }
    }
  });

  // HEADER SCROLL EFFECT
  // Progressively changes the header blur background as the user scrolls down. The config options are below:
  // scrollRange => the amount of pixels needed for the user to scroll in order to reach the maximum blur
  // maxBlur => amount of maximum blur
  // maxBgOpacity => amount of maximum bg opacity
  // Also takes into account the reduced motion preference

  let lastScrollY = 0;
  const scrollRange = 600;
  const maxBlur = 64;
  const maxBgOpacity = 0.85;
  const maxShadowOpacity = 0;
  const maxBorderOpacity = 1;

  function forceHeaderBlur() {
    const prefersReducedMotion =
      document.documentElement.classList.contains('reduced-motion');

    if (mainHeader) {
      mainHeader.style.setProperty(
        '--blur-amount',
        prefersReducedMotion ? '0px' : `${maxBlur}px`
      );
      mainHeader.style.setProperty('--bg-opacity', maxBgOpacity.toString());
      mainHeader.style.setProperty(
        '--shadow-opacity',
        maxShadowOpacity.toString()
      );
      mainHeader.style.setProperty(
        '--border-opacity',
        maxBorderOpacity.toString()
      );
    }
  }

  function updateHeaderOnScroll() {
    const scrollY = window.scrollY;
    const prefersReducedMotion =
      document.documentElement.classList.contains('reduced-motion');

    if (isMenuOpen) {
      forceHeaderBlur();
      return;
    }

    if (prefersReducedMotion) {
      const scrollProgress = Math.min(scrollY / scrollRange, 1);
      const easedProgress = 1 - Math.pow(1 - scrollProgress, 3);
      const bgOpacity = easedProgress;

      if (mainHeader) {
        mainHeader.style.setProperty('--blur-amount', '0px');
        mainHeader.style.setProperty('--bg-opacity', bgOpacity.toString());
        mainHeader.style.setProperty('--shadow-opacity', '0');
        mainHeader.style.setProperty('--border-opacity', '0');
      }
    } else {
      const scrollProgress = Math.min(scrollY / scrollRange, 1);
      const easedProgress = 1 - Math.pow(1 - scrollProgress, 3);

      const blurAmount = easedProgress * maxBlur;
      const bgOpacity = easedProgress * maxBgOpacity;
      const shadowOpacity = easedProgress * maxShadowOpacity;
      const borderOpacity = easedProgress * maxBorderOpacity;

      if (mainHeader) {
        mainHeader.style.setProperty('--blur-amount', `${blurAmount}px`);
        mainHeader.style.setProperty('--bg-opacity', bgOpacity.toString());
        mainHeader.style.setProperty(
          '--shadow-opacity',
          shadowOpacity.toString()
        );
        mainHeader.style.setProperty(
          '--border-opacity',
          borderOpacity.toString()
        );
      }
    }

    lastScrollY = scrollY;
  }

  window.addEventListener('scroll', updateHeaderOnScroll, { passive: true });

  updateHeaderOnScroll();
</script>

<style>
  #main-header {
    backdrop-filter: blur(var(--blur-amount, 0px));
    background: rgba(255, 255, 255, var(--bg-opacity, 0));
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, var(--shadow-opacity, 0));
    border-bottom: 2px solid rgba(0, 0, 0, var(--border-opacity, 0));
    transition:
      backdrop-filter 400ms ease-out,
      background 400ms ease-out,
      box-shadow 400ms ease-out,
      border-bottom 400ms ease-out;
  }

  :global(.dark) #main-header {
    background: rgba(0, 0, 0, var(--bg-opacity, 0)) !important;
    border-bottom: 2px solid rgba(54, 65, 83, var(--border-opacity, 0)) !important;
    box-shadow: 0 4px 6px -1px rgba(255, 255, 255, var(--shadow-opacity, 0)) !important;
  }

  :global(.dark) #mobile-menu {
    background: rgba(17, 24, 39, 0.85) !important;
  }
</style>
